{"ast":null,"code":"var _jsxFileName = \"/Users/Rodri/Desktop/MadridCentral/madrid-central/src/ContractData.js\";\nimport { drizzleConnect } from \"drizzle-react\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ContractData extends Component {\n  constructor(props, context) {\n    super(props); // Fetch initial value from chain and return cache key for reactive updates.\n\n    var methodArgs = this.props.methodArgs ? this.props.methodArgs : [];\n    this.contracts = context.drizzle.contracts;\n    this.state = {\n      dataKey: this.contracts[this.props.contract].methods[this.props.method].cacheCall(...methodArgs)\n    };\n  } // Will not fix legacy component\n  // eslint-disable-next-line react/no-deprecated\n\n\n  componentWillReceiveProps(nextProps) {\n    const _this$props = this.props,\n          methodArgs = _this$props.methodArgs,\n          contract = _this$props.contract,\n          method = _this$props.method;\n    const didContractChange = contract !== nextProps.contract;\n    const didMethodChange = method !== nextProps.method;\n    const didArgsChange = JSON.stringify(methodArgs) !== JSON.stringify(nextProps.methodArgs);\n\n    if (didContractChange || didMethodChange || didArgsChange) {\n      this.setState({\n        dataKey: this.contracts[nextProps.contract].methods[nextProps.method].cacheCall(...nextProps.methodArgs)\n      });\n    }\n  }\n\n  render() {\n    // Contract is not yet intialized.\n    if (!this.props.contracts[this.props.contract].initialized) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Initializing...\");\n    } // If the cache key we received earlier isn't in the store yet; the initial value is still being fetched.\n\n\n    if (!(this.state.dataKey in this.props.contracts[this.props.contract][this.props.method])) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Fetching...\");\n    } // Show a loading spinner for future updates.\n\n\n    var pendingSpinner = this.props.contracts[this.props.contract].synced ? \"\" : \" ðŸ”„\"; // Optionally hide loading spinner (EX: ERC20 token symbol).\n\n    if (this.props.hideIndicator) {\n      pendingSpinner = \"\";\n    }\n\n    var displayData = this.props.contracts[this.props.contract][this.props.method][this.state.dataKey].value; // Optionally convert to UTF8\n\n    if (this.props.toUtf8) {\n      displayData = this.context.drizzle.web3.utils.hexToUtf8(displayData);\n    } // Optionally convert to Ascii\n\n\n    if (this.props.toAscii) {\n      displayData = this.context.drizzle.web3.utils.hexToAscii(displayData);\n    } // If return value is an array\n\n\n    if (Array.isArray(displayData)) {\n      const displayListItems = displayData.map((datum, index) => {\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, \"\".concat(datum), pendingSpinner);\n      });\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, displayListItems);\n    } // If retun value is an object\n\n\n    if (typeof displayData === \"object\") {\n      var i = 0;\n      const displayObjectProps = [];\n      Object.keys(displayData).forEach(key => {\n        if (i !== key) {\n          displayObjectProps.push(React.createElement(\"li\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(\"strong\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, key), pendingSpinner, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }), \"\".concat(displayData[key])));\n        }\n\n        i++;\n      });\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, displayObjectProps);\n    }\n\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"\".concat(displayData), pendingSpinner);\n  }\n\n}\n\nContractData.contextTypes = {\n  drizzle: PropTypes.object\n};\nContractData.propTypes = {\n  contracts: PropTypes.array.isRequired,\n  contract: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  methodArgs: PropTypes.array,\n  hideIndicator: PropTypes.bool,\n  toUtf8: PropTypes.bool,\n  toAscii: PropTypes.bool\n};\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts\n  };\n};\n\nexport default drizzleConnect(ContractData, mapStateToProps);","map":{"version":3,"sources":["/Users/Rodri/Desktop/MadridCentral/madrid-central/src/ContractData.js"],"names":["drizzleConnect","React","Component","PropTypes","ContractData","constructor","props","context","methodArgs","contracts","drizzle","state","dataKey","contract","methods","method","cacheCall","componentWillReceiveProps","nextProps","didContractChange","didMethodChange","didArgsChange","JSON","stringify","setState","render","initialized","pendingSpinner","synced","hideIndicator","displayData","value","toUtf8","web3","utils","hexToUtf8","toAscii","hexToAscii","Array","isArray","displayListItems","map","datum","index","i","displayObjectProps","Object","keys","forEach","key","push","contextTypes","object","propTypes","array","isRequired","string","bool","mapStateToProps"],"mappings":"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","sourcesContent":["import { drizzleConnect } from \"drizzle-react\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ContractData extends Component {\n  constructor(props, context) {\n    super(props);\n\n    // Fetch initial value from chain and return cache key for reactive updates.\n    var methodArgs = this.props.methodArgs ? this.props.methodArgs : [];\n\n    this.contracts = context.drizzle.contracts;\n    this.state = {\n      dataKey: this.contracts[this.props.contract].methods[\n        this.props.method\n      ].cacheCall(...methodArgs),\n    };\n  }\n\n  // Will not fix legacy component\n  // eslint-disable-next-line react/no-deprecated\n  componentWillReceiveProps(nextProps) {\n    const { methodArgs, contract, method } = this.props;\n\n    const didContractChange = contract !== nextProps.contract;\n    const didMethodChange = method !== nextProps.method;\n    const didArgsChange =\n      JSON.stringify(methodArgs) !== JSON.stringify(nextProps.methodArgs);\n\n    if (didContractChange || didMethodChange || didArgsChange) {\n      this.setState({\n        dataKey: this.contracts[nextProps.contract].methods[\n          nextProps.method\n        ].cacheCall(...nextProps.methodArgs),\n      });\n    }\n  }\n\n  render() {\n    // Contract is not yet intialized.\n    if (!this.props.contracts[this.props.contract].initialized) {\n      return <span>Initializing...</span>;\n    }\n\n    // If the cache key we received earlier isn't in the store yet; the initial value is still being fetched.\n    if (\n      !(\n        this.state.dataKey in\n        this.props.contracts[this.props.contract][this.props.method]\n      )\n    ) {\n      return <span>Fetching...</span>;\n    }\n\n    // Show a loading spinner for future updates.\n    var pendingSpinner = this.props.contracts[this.props.contract].synced\n      ? \"\"\n      : \" ðŸ”„\";\n\n    // Optionally hide loading spinner (EX: ERC20 token symbol).\n    if (this.props.hideIndicator) {\n      pendingSpinner = \"\";\n    }\n\n    var displayData = this.props.contracts[this.props.contract][\n      this.props.method\n    ][this.state.dataKey].value;\n\n    // Optionally convert to UTF8\n    if (this.props.toUtf8) {\n      displayData = this.context.drizzle.web3.utils.hexToUtf8(displayData);\n    }\n\n    // Optionally convert to Ascii\n    if (this.props.toAscii) {\n      displayData = this.context.drizzle.web3.utils.hexToAscii(displayData);\n    }\n\n    // If return value is an array\n    if (Array.isArray(displayData)) {\n      const displayListItems = displayData.map((datum, index) => {\n        return (\n          <li key={index}>\n            {`${datum}`}\n            {pendingSpinner}\n          </li>\n        );\n      });\n\n      return <ul>{displayListItems}</ul>;\n    }\n\n    // If retun value is an object\n    if (typeof displayData === \"object\") {\n      var i = 0;\n      const displayObjectProps = [];\n\n      Object.keys(displayData).forEach(key => {\n        if (i !== key) {\n          displayObjectProps.push(\n            <li key={i}>\n              <strong>{key}</strong>\n              {pendingSpinner}\n              <br />\n              {`${displayData[key]}`}\n            </li>,\n          );\n        }\n\n        i++;\n      });\n\n      return <ul>{displayObjectProps}</ul>;\n    }\n\n    return (\n      <span>\n        {`${displayData}`}\n        {pendingSpinner}\n      </span>\n    );\n  }\n}\n\nContractData.contextTypes = {\n  drizzle: PropTypes.object,\n};\n\nContractData.propTypes = {\n  contracts: PropTypes.array.isRequired,\n  contract: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  methodArgs: PropTypes.array,\n  hideIndicator: PropTypes.bool,\n  toUtf8: PropTypes.bool,\n  toAscii: PropTypes.bool,\n};\n\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n  };\n};\n\nexport default drizzleConnect(ContractData, mapStateToProps);\n"]},"metadata":{},"sourceType":"module"}