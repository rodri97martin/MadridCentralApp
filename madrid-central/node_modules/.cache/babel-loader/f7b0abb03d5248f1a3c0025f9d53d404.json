{"ast":null,"code":"var _jsxFileName = \"/Users/Rodri/Desktop/MadridCentralApp/madrid-central/src/ContractForm.js\";\nimport { drizzleConnect } from \"drizzle-react\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ContractForm extends Component {\n  constructor(props, context) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.contracts = context.drizzle.contracts;\n    this.utils = context.drizzle.web3.utils; // Get the contract ABI\n\n    const abi = this.contracts[this.props.contract].abi;\n    this.inputs = [];\n    var initialState = {}; // Iterate over abi for correct function.\n\n    for (var i = 0; i < abi.length; i++) {\n      if (abi[i].name === this.props.method) {\n        this.inputs = abi[i].inputs;\n\n        for (var j = 0; j < this.inputs.length; j++) {\n          initialState[this.inputs[j].name] = \"\";\n        }\n\n        break;\n      }\n    }\n\n    this.state = initialState;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const convertedInputs = this.inputs.map((input, index) => {\n      if (input.type === 'bytes32') {\n        return this.utils.toHex(this.state[input.name]);\n      }\n\n      return this.state[input.name];\n    });\n\n    if (this.props.sendArgs) {\n      return this.contracts[this.props.contract].methods[this.props.method].cacheSend(...convertedInputs, this.props.sendArgs);\n    }\n\n    return this.contracts[this.props.contract].methods[this.props.method].cacheSend(...convertedInputs);\n  }\n\n  handleInputChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  translateType(type) {\n    switch (true) {\n      case /^uint/.test(type):\n        return \"number\";\n\n      case /^string/.test(type) || /^bytes/.test(type):\n        return \"text\";\n\n      case /^bool/.test(type):\n        return \"checkbox\";\n\n      default:\n        return \"text\";\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"pure-form pure-form-stacked\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.inputs.map((input, index) => {\n      var inputType = this.translateType(input.type);\n      var inputLabel = this.props.labels ? this.props.labels[index] : input.name; // check if input type is struct and if so loop out struct fields as well\n\n      return React.createElement(\"input\", {\n        key: input.name,\n        type: inputType,\n        name: input.name,\n        value: this.state[input.name],\n        placeholder: inputLabel,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    }), React.createElement(\"button\", {\n      key: \"submit\",\n      className: \"pure-button\",\n      type: \"button\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.props.name));\n  }\n\n}\n\nContractForm.contextTypes = {\n  drizzle: PropTypes.object\n};\nContractForm.propTypes = {\n  contract: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  sendArgs: PropTypes.object,\n  labels: PropTypes.arrayOf(PropTypes.string)\n};\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts\n  };\n};\n\nexport default drizzleConnect(ContractForm, mapStateToProps);","map":{"version":3,"sources":["/Users/Rodri/Desktop/MadridCentralApp/madrid-central/src/ContractForm.js"],"names":["drizzleConnect","React","Component","PropTypes","ContractForm","constructor","props","context","handleInputChange","bind","handleSubmit","contracts","drizzle","utils","web3","abi","contract","inputs","initialState","i","length","name","method","j","state","event","preventDefault","convertedInputs","map","input","index","type","toHex","sendArgs","methods","cacheSend","setState","target","value","translateType","test","render","inputType","inputLabel","labels","contextTypes","object","propTypes","string","isRequired","arrayOf","mapStateToProps"],"mappings":"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","sourcesContent":["import { drizzleConnect } from \"drizzle-react\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ContractForm extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.contracts = context.drizzle.contracts;\n    this.utils = context.drizzle.web3.utils;\n\n    // Get the contract ABI\n    const abi = this.contracts[this.props.contract].abi;\n\n    this.inputs = [];\n    var initialState = {};\n\n    // Iterate over abi for correct function.\n    for (var i = 0; i < abi.length; i++) {\n      if (abi[i].name === this.props.method) {\n        this.inputs = abi[i].inputs;\n\n        for (var j = 0; j < this.inputs.length; j++) {\n          initialState[this.inputs[j].name] = \"\";\n        }\n\n        break;\n      }\n    }\n\n    this.state = initialState;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const convertedInputs = this.inputs.map((input, index) => {\n      if (input.type === 'bytes32') {\n        return this.utils.toHex(this.state[input.name])\n      }\n      return this.state[input.name];\n    })\n\n    if (this.props.sendArgs) {\n      return this.contracts[this.props.contract].methods[\n        this.props.method\n      ].cacheSend(...convertedInputs, this.props.sendArgs);\n    }\n\n    return this.contracts[this.props.contract].methods[\n      this.props.method\n    ].cacheSend(...convertedInputs);\n  }\n\n  handleInputChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  translateType(type) {\n    switch (true) {\n      case /^uint/.test(type):\n        return \"number\";\n      case /^string/.test(type) || /^bytes/.test(type):\n        return \"text\";\n      case /^bool/.test(type):\n        return \"checkbox\";\n      default:\n        return \"text\";\n    }\n  }\n\n  render() {\n    return (\n      <form className=\"pure-form pure-form-stacked\" onSubmit={this.handleSubmit}>\n        {this.inputs.map((input, index) => {\n          var inputType = this.translateType(input.type);\n          var inputLabel = this.props.labels\n            ? this.props.labels[index]\n            : input.name;\n          // check if input type is struct and if so loop out struct fields as well\n          return (\n            <input\n              key={input.name}\n              type={inputType}\n              name={input.name}\n              value={this.state[input.name]}\n              placeholder={inputLabel}\n              onChange={this.handleInputChange}\n            />\n          );\n        })}\n        <button\n          key=\"submit\"\n          className=\"pure-button\"\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          {this.props.name}\n        </button>\n      </form>\n    );\n  }\n}\n\nContractForm.contextTypes = {\n  drizzle: PropTypes.object,\n};\n\nContractForm.propTypes = {\n  contract: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  sendArgs: PropTypes.object,\n  labels: PropTypes.arrayOf(PropTypes.string),\n};\n\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n  };\n};\n\nexport default drizzleConnect(ContractForm, mapStateToProps);\n"]},"metadata":{},"sourceType":"module"}